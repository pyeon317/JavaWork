package day18.api.regex;

import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexEx02 {

	public static void main(String[] args) {
		/*
		 * 
		 * [0-9]{2, 4} 숫자중 2~4개 연속된 형태
		 * [0-9]{3} 0~9숫자중 3개 연속된 형태
		 * [A-Z]+   대문자 1개 이상
		 * [a-zA-Z]? 알파벳 0~1개 나오는 경우
		 * [기-힣]*  한글 0회 이상
		 * 
		 * 정규표현식에 속하지 않는 문자는 그냥 사용할 수 있습니다..
		 * [0-9]{3}-[0-9]{4} 숫자 3개 - 숫자 4개 나오는 형태
		 * 정규표현식에 포함되는 문자를 쓰고 싶다면 \\
		 * \\+ \ 가 한개 이상
		 * \?+ ? 가 한개 이상
		 * 
		 * 정확히 일치하는 문자
		 * \?. 정확히 ?에 일치하는
		 * [0-9]{3}원 000원 형식을 찾음
		 * 
		 * \\d [0-9]와 같은 의미
		 * \\w [a-zA-Z]와 같은 의미
		 * \\s 공백을 나타냄
		 */
		
		String info1 = "홍길동/주소/02-123-4567/aaa123@naver.com";
		String info2 = "이순신/주소/010-1234-1234/bbb123@gmail.com";
		
		//전봐번호 형식
		String pattern1 = "\\d{2,3}-\\d{3,4}-\\d{4}";
		//이메일 형식
		String pattern2 ="[a-zA-Z0-9]+[a - Z]+[a-z]+";
		
		//패턴을 컴파일
		Pattern p1 = Pattern.compile(pattern1); 
		Pattern p2 = Pattern.compile(pattern2);
		
		//찾는 작업
		Matcher m1 = p1.matcher(info1);
		Matcher m2 = p2.matcher(info2);
		//find() - 일치하는 부분이 있다면 true
		//start() - 일치하느는 부분의 첫번째 인겍스
		//end() - 일치하는 부분의 마지막 인덱스
		//group() - 일치하는 부분의 추출
		
		
		while(m1.find()) {//패턴이 여러번 나오면 순서대로 찾습니다.
			System.out.println("첫번째 인덱스:" + m1.start());
			System.out.println("마지막 인덱스:" + m1.end());
			System.out.println(m1.group());
		}
		
		while(m2.find()) {//패턴을 가장처음 발견되는 1번 찾습니다.
			
			System.out.println("첫번째 인덱스:" + m2.start());
			System.out.println("마지막 인덱스:" + m2.end());
			System.out.println(m2.group());
		}
		
		System.out.println("----------------------------------------");
		List<String> list = Arrays.asList(info1, info2);
		System.out.println(list.toString());
		
		for(int i = 0; i < list.size(); i++ ) {
			
			String str = list.get(i);
			//패턴생성
			//Pattern x = Pattern.compile(pattern1);
			//Matcher y = x.matcher(str);	
			
			Matcher x = Pattern.compile(pattern1).matcher(str);//1번째 패턴
			Matcher y = Pattern.compile(pattern2).matcher(str);//2번째 패턴
			
			if(x.find() && y.find()) {
				System.out.println(x.group());
				System.out.println(y.group());
			}
		
		}
		
	}
}
